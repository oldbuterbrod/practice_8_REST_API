package main

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

type Book struct {
	ID            string  `json:"id"`
	Title         string  `json:"title"`
	Genre         string  `json:"genre"`
	Description   string  `json:"description"`
	Price         float64 `json:"price"`
	ISBN          string  `json:"isbn"`
	PublisherID   int     `json:"publisher_id"`
	AuthorID      int     `json:"author_id"`
	PublishedDate string  `json:"published_date"`
	Stock         int     `json:"stock"`
}

var books = []Book{
	{"1", "Сёгун", "Исторический роман", "История самураев и западного мира.", 25.00, "9781234567800", 1, 1, "1975-03-12", 10},
	{"2", "Человек в высоком замке", "Альтернативная история", "Мир, в котором исход Второй мировой войны оказался другим.", 19.99, "9781234567801", 2, 2, "1962-10-15", 5},
	{"3", "Божественная комедия", "Поэзия", "Эпическое путешествие, в котором Данте проходит через Ад, Чистилище и Рай под руководством поэта Вергилия.", 30.50, "9781234567802", 3, 3, "1320-09-14", 8},
	{"4", "Дракула", "Ужасы", "Классический роман о вампирах и графе Дракуле.", 22.00, "9781234567803", 4, 4, "1897-05-26", 12},
	{"5", "Ведьмак", "Фэнтези", "История ведьмака Геральта из Ривии.", 28.99, "9781234567804", 5, 5, "1993-08-01", 7},
	{"6", "Автостопом по галактике", "Фантастика", "Невероятные приключения Артура Дента в космосе.", 24.75, "9781234567805", 6, 6, "1979-10-12", 15},
	{"7", "Хранители", "Графический роман", "История супергероев в альтернативной Америке.", 18.50, "9781234567806", 7, 7, "1986-09-01", 10},
	{"8", "Берсерк", "Манга", "Приключения Гатса в мире тьмы и магии.", 35.00, "9781234567807", 8, 8, "1989-11-26", 20},
	{"9", "Искусство войны", "Философия", "Трактат о стратегии и тактике войны.", 16.00, "9781234567808", 9, 9, "-500-01-01", 50},
	{"10", "Краткая история времени", "Наука", "Исследование вселенной и её законов.", 27.00, "9781234567809", 10, 10, "1988-03-01", 11},
	{"11", "Властелин колец", "Фэнтези", "Приключения Фродо Бэггинса в Средиземье.", 40.99, "9781234567810", 11, 11, "1954-07-29", 30},
	{"12", "Грокаем алгоритмы", "Программирование", "Введение в алгоритмы и их применение.", 35.50, "9781234567811", 12, 12, "2016-06-01", 25},
	{"13", "Программирование на Go", "Программирование", "Полное руководство по языку Go.", 32.00, "9781234567812", 13, 13, "2020-01-15", 18},
	{"14", "Преступление и наказание", "Классика", "Философское исследование морали и вины через судьбу студента, решившегося на преступление.", 17.99, "9781234567813", 14, 14, "1866-11-01", 40},
	{"15", "Мастер и Маргарита", "Классика", "Роман о любви, дьяволе и Москве.", 22.50, "9781234567814", 15, 15, "1966-12-29", 35},
	{"16", "Машина времени", "Фантастика", "Классическая научная фантастика о путешествиях во времени.", 20.00, "9781234567820", 16, 16, "1895-05-07", 14},
	{"17", "Мечтают ли андроиды об электроовцах?", "Фантастика", "История, легшая в основу фильма 'Бегущий по лезвию'.", 29.99, "9781234567816", 17, 17, "1968-06-01", 17},
	{"18", "451 градус по Фаренгейту", "Антиутопия", "Роман о мире, где книги запрещены.", 21.50, "9781234567817", 18, 18, "1953-10-19", 14},
	{"19", "Алиса в стране чудес", "Сказка", "Приключения Алисы в волшебной стране.", 14.75, "9781234567818", 19, 19, "1865-11-26", 22},
	{"20", "По ком звонит колокол", "Военная проза", "История о гражданской войне в Испании.", 23.90, "9781234567819", 20, 20, "1940-10-21", 16},
}

func main() {
	router := gin.Default()

	// Получение всех книг
	router.GET("/books", getBooks)

	// Получение книги по ID
	router.GET("/books/:id", getBookByID)

	// Создание новой книги
	router.POST("/books", createBook)

	// Обновление существующей книги
	router.PUT("/books/:id", updateBook)

	// Удаление книги
	router.DELETE("/books/:id", deleteBook)

	router.Run(":8080")
}

func getBooks(c *gin.Context) {
	c.JSON(http.StatusOK, books)
}

func getBookByID(c *gin.Context) {
	id := c.Param("id")

	for _, book := range books {
		if book.ID == id {
			c.JSON(http.StatusOK, book)
			return
		}
	}

	c.JSON(http.StatusNotFound, gin.H{"message": "book not found"})
}

func createBook(c *gin.Context) {
	var newBook Book

	if err := c.BindJSON(&newBook); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "invalid request"})
		return
	}

	// автоинкрементируем ID

	books = append(books, newBook)
	c.JSON(http.StatusCreated, newBook)
}

func updateBook(c *gin.Context) {
	id := c.Param("id")
	var updatedBook Book

	if err := c.BindJSON(&updatedBook); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "invalid request"})
		return
	}

	for i, book := range books {
		if book.ID == id {
			books[i] = updatedBook
			c.JSON(http.StatusOK, updatedBook)
			return
		}
	}

	c.JSON(http.StatusNotFound, gin.H{"message": "book not found"})
}

func deleteBook(c *gin.Context) {
	id := c.Param("id")

	for i, book := range books {
		if book.ID == id {
			books = append(books[:i], books[i+1:]...)
			c.JSON(http.StatusOK, gin.H{"message": "book deleted"})
			return
		}
	}

	c.JSON(http.StatusNotFound, gin.H{"message": "book not found"})
}
